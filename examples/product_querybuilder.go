// Code generated by querybuilder. DO NOT EDIT.

package examples

import (
	"time"

	"github.com/dchlong/querybuilder/repository"
	"gorm.io/datatypes"
)

// ProductFilters provides filtering capabilities for Product
type ProductFilters struct {
	filters map[ProductDBSchemaField][]*repository.Filter
}

// NewProductFilters creates a new filter instance
func NewProductFilters() *ProductFilters {
	return &ProductFilters{
		filters: make(map[ProductDBSchemaField][]*repository.Filter),
	}
}

// ListFilters returns all configured filters
func (f *ProductFilters) ListFilters() []*repository.Filter {
	var result []*repository.Filter
	for _, filterList := range f.filters {
		result = append(result, filterList...)
	}
	return result
}

// IDEq filters by ID eq
func (p *ProductFilters) IDEq(iD int64) *ProductFilters {
	p.filters[ProductDBSchema.ID] = append(p.filters[ProductDBSchema.ID],
		&repository.Filter{
			Field:    string(ProductDBSchema.ID),
			Operator: repository.OperatorEqual,
			Value:    iD,
		})
	return p
}

// IDNe filters by ID ne
func (p *ProductFilters) IDNe(iD int64) *ProductFilters {
	p.filters[ProductDBSchema.ID] = append(p.filters[ProductDBSchema.ID],
		&repository.Filter{
			Field:    string(ProductDBSchema.ID),
			Operator: repository.OperatorNotEqual,
			Value:    iD,
		})
	return p
}

// IDLt filters by ID lt
func (p *ProductFilters) IDLt(iD int64) *ProductFilters {
	p.filters[ProductDBSchema.ID] = append(p.filters[ProductDBSchema.ID],
		&repository.Filter{
			Field:    string(ProductDBSchema.ID),
			Operator: repository.OperatorLessThan,
			Value:    iD,
		})
	return p
}

// IDGt filters by ID gt
func (p *ProductFilters) IDGt(iD int64) *ProductFilters {
	p.filters[ProductDBSchema.ID] = append(p.filters[ProductDBSchema.ID],
		&repository.Filter{
			Field:    string(ProductDBSchema.ID),
			Operator: repository.OperatorGreaterThan,
			Value:    iD,
		})
	return p
}

// IDLte filters by ID lte
func (p *ProductFilters) IDLte(iD int64) *ProductFilters {
	p.filters[ProductDBSchema.ID] = append(p.filters[ProductDBSchema.ID],
		&repository.Filter{
			Field:    string(ProductDBSchema.ID),
			Operator: repository.OperatorLessThanOrEqual,
			Value:    iD,
		})
	return p
}

// IDGte filters by ID gte
func (p *ProductFilters) IDGte(iD int64) *ProductFilters {
	p.filters[ProductDBSchema.ID] = append(p.filters[ProductDBSchema.ID],
		&repository.Filter{
			Field:    string(ProductDBSchema.ID),
			Operator: repository.OperatorGreaterThanOrEqual,
			Value:    iD,
		})
	return p
}

// IDIn filters by ID in list
func (p *ProductFilters) IDIn(iDs ...int64) *ProductFilters {
	p.filters[ProductDBSchema.ID] = append(p.filters[ProductDBSchema.ID],
		&repository.Filter{
			Field:    string(ProductDBSchema.ID),
			Operator: repository.OperatorIn,
			Value:    iDs,
		})
	return p
}

// IDNotIn filters by ID in list
func (p *ProductFilters) IDNotIn(iDs ...int64) *ProductFilters {
	p.filters[ProductDBSchema.ID] = append(p.filters[ProductDBSchema.ID],
		&repository.Filter{
			Field:    string(ProductDBSchema.ID),
			Operator: repository.OperatorNotIn,
			Value:    iDs,
		})
	return p
}

// NameEq filters by Name eq
func (p *ProductFilters) NameEq(name string) *ProductFilters {
	p.filters[ProductDBSchema.Name] = append(p.filters[ProductDBSchema.Name],
		&repository.Filter{
			Field:    string(ProductDBSchema.Name),
			Operator: repository.OperatorEqual,
			Value:    name,
		})
	return p
}

// NameNe filters by Name ne
func (p *ProductFilters) NameNe(name string) *ProductFilters {
	p.filters[ProductDBSchema.Name] = append(p.filters[ProductDBSchema.Name],
		&repository.Filter{
			Field:    string(ProductDBSchema.Name),
			Operator: repository.OperatorNotEqual,
			Value:    name,
		})
	return p
}

// NameLike filters by Name like
func (p *ProductFilters) NameLike(name string) *ProductFilters {
	p.filters[ProductDBSchema.Name] = append(p.filters[ProductDBSchema.Name],
		&repository.Filter{
			Field:    string(ProductDBSchema.Name),
			Operator: repository.OperatorLike,
			Value:    name,
		})
	return p
}

// NameNotLike filters by Name notlike
func (p *ProductFilters) NameNotLike(name string) *ProductFilters {
	p.filters[ProductDBSchema.Name] = append(p.filters[ProductDBSchema.Name],
		&repository.Filter{
			Field:    string(ProductDBSchema.Name),
			Operator: repository.OperatorNotLike,
			Value:    name,
		})
	return p
}

// NameIn filters by Name in list
func (p *ProductFilters) NameIn(names ...string) *ProductFilters {
	p.filters[ProductDBSchema.Name] = append(p.filters[ProductDBSchema.Name],
		&repository.Filter{
			Field:    string(ProductDBSchema.Name),
			Operator: repository.OperatorIn,
			Value:    names,
		})
	return p
}

// NameNotIn filters by Name in list
func (p *ProductFilters) NameNotIn(names ...string) *ProductFilters {
	p.filters[ProductDBSchema.Name] = append(p.filters[ProductDBSchema.Name],
		&repository.Filter{
			Field:    string(ProductDBSchema.Name),
			Operator: repository.OperatorNotIn,
			Value:    names,
		})
	return p
}

// NameLt filters by Name lt
func (p *ProductFilters) NameLt(name string) *ProductFilters {
	p.filters[ProductDBSchema.Name] = append(p.filters[ProductDBSchema.Name],
		&repository.Filter{
			Field:    string(ProductDBSchema.Name),
			Operator: repository.OperatorLessThan,
			Value:    name,
		})
	return p
}

// NameGt filters by Name gt
func (p *ProductFilters) NameGt(name string) *ProductFilters {
	p.filters[ProductDBSchema.Name] = append(p.filters[ProductDBSchema.Name],
		&repository.Filter{
			Field:    string(ProductDBSchema.Name),
			Operator: repository.OperatorGreaterThan,
			Value:    name,
		})
	return p
}

// NameLte filters by Name lte
func (p *ProductFilters) NameLte(name string) *ProductFilters {
	p.filters[ProductDBSchema.Name] = append(p.filters[ProductDBSchema.Name],
		&repository.Filter{
			Field:    string(ProductDBSchema.Name),
			Operator: repository.OperatorLessThanOrEqual,
			Value:    name,
		})
	return p
}

// NameGte filters by Name gte
func (p *ProductFilters) NameGte(name string) *ProductFilters {
	p.filters[ProductDBSchema.Name] = append(p.filters[ProductDBSchema.Name],
		&repository.Filter{
			Field:    string(ProductDBSchema.Name),
			Operator: repository.OperatorGreaterThanOrEqual,
			Value:    name,
		})
	return p
}

// SKUEq filters by SKU eq
func (p *ProductFilters) SKUEq(sKU string) *ProductFilters {
	p.filters[ProductDBSchema.SKU] = append(p.filters[ProductDBSchema.SKU],
		&repository.Filter{
			Field:    string(ProductDBSchema.SKU),
			Operator: repository.OperatorEqual,
			Value:    sKU,
		})
	return p
}

// SKUNe filters by SKU ne
func (p *ProductFilters) SKUNe(sKU string) *ProductFilters {
	p.filters[ProductDBSchema.SKU] = append(p.filters[ProductDBSchema.SKU],
		&repository.Filter{
			Field:    string(ProductDBSchema.SKU),
			Operator: repository.OperatorNotEqual,
			Value:    sKU,
		})
	return p
}

// SKULike filters by SKU like
func (p *ProductFilters) SKULike(sKU string) *ProductFilters {
	p.filters[ProductDBSchema.SKU] = append(p.filters[ProductDBSchema.SKU],
		&repository.Filter{
			Field:    string(ProductDBSchema.SKU),
			Operator: repository.OperatorLike,
			Value:    sKU,
		})
	return p
}

// SKUNotLike filters by SKU notlike
func (p *ProductFilters) SKUNotLike(sKU string) *ProductFilters {
	p.filters[ProductDBSchema.SKU] = append(p.filters[ProductDBSchema.SKU],
		&repository.Filter{
			Field:    string(ProductDBSchema.SKU),
			Operator: repository.OperatorNotLike,
			Value:    sKU,
		})
	return p
}

// SKUIn filters by SKU in list
func (p *ProductFilters) SKUIn(sKUs ...string) *ProductFilters {
	p.filters[ProductDBSchema.SKU] = append(p.filters[ProductDBSchema.SKU],
		&repository.Filter{
			Field:    string(ProductDBSchema.SKU),
			Operator: repository.OperatorIn,
			Value:    sKUs,
		})
	return p
}

// SKUNotIn filters by SKU in list
func (p *ProductFilters) SKUNotIn(sKUs ...string) *ProductFilters {
	p.filters[ProductDBSchema.SKU] = append(p.filters[ProductDBSchema.SKU],
		&repository.Filter{
			Field:    string(ProductDBSchema.SKU),
			Operator: repository.OperatorNotIn,
			Value:    sKUs,
		})
	return p
}

// SKULt filters by SKU lt
func (p *ProductFilters) SKULt(sKU string) *ProductFilters {
	p.filters[ProductDBSchema.SKU] = append(p.filters[ProductDBSchema.SKU],
		&repository.Filter{
			Field:    string(ProductDBSchema.SKU),
			Operator: repository.OperatorLessThan,
			Value:    sKU,
		})
	return p
}

// SKUGt filters by SKU gt
func (p *ProductFilters) SKUGt(sKU string) *ProductFilters {
	p.filters[ProductDBSchema.SKU] = append(p.filters[ProductDBSchema.SKU],
		&repository.Filter{
			Field:    string(ProductDBSchema.SKU),
			Operator: repository.OperatorGreaterThan,
			Value:    sKU,
		})
	return p
}

// SKULte filters by SKU lte
func (p *ProductFilters) SKULte(sKU string) *ProductFilters {
	p.filters[ProductDBSchema.SKU] = append(p.filters[ProductDBSchema.SKU],
		&repository.Filter{
			Field:    string(ProductDBSchema.SKU),
			Operator: repository.OperatorLessThanOrEqual,
			Value:    sKU,
		})
	return p
}

// SKUGte filters by SKU gte
func (p *ProductFilters) SKUGte(sKU string) *ProductFilters {
	p.filters[ProductDBSchema.SKU] = append(p.filters[ProductDBSchema.SKU],
		&repository.Filter{
			Field:    string(ProductDBSchema.SKU),
			Operator: repository.OperatorGreaterThanOrEqual,
			Value:    sKU,
		})
	return p
}

// DescriptionEq filters by Description eq
func (p *ProductFilters) DescriptionEq(description *string) *ProductFilters {
	p.filters[ProductDBSchema.Description] = append(p.filters[ProductDBSchema.Description],
		&repository.Filter{
			Field:    string(ProductDBSchema.Description),
			Operator: repository.OperatorEqual,
			Value:    description,
		})
	return p
}

// DescriptionNe filters by Description ne
func (p *ProductFilters) DescriptionNe(description *string) *ProductFilters {
	p.filters[ProductDBSchema.Description] = append(p.filters[ProductDBSchema.Description],
		&repository.Filter{
			Field:    string(ProductDBSchema.Description),
			Operator: repository.OperatorNotEqual,
			Value:    description,
		})
	return p
}

// DescriptionIsNull filters by Description is null check
func (p *ProductFilters) DescriptionIsNull() *ProductFilters {
	p.filters[ProductDBSchema.Description] = append(p.filters[ProductDBSchema.Description],
		&repository.Filter{
			Field:    string(ProductDBSchema.Description),
			Operator: repository.OperatorIsNull,
			Value:    nil,
		})
	return p
}

// DescriptionIsNotNull filters by Description is null check
func (p *ProductFilters) DescriptionIsNotNull() *ProductFilters {
	p.filters[ProductDBSchema.Description] = append(p.filters[ProductDBSchema.Description],
		&repository.Filter{
			Field:    string(ProductDBSchema.Description),
			Operator: repository.OperatorIsNotNull,
			Value:    nil,
		})
	return p
}

// PriceEq filters by Price eq
func (p *ProductFilters) PriceEq(price float64) *ProductFilters {
	p.filters[ProductDBSchema.Price] = append(p.filters[ProductDBSchema.Price],
		&repository.Filter{
			Field:    string(ProductDBSchema.Price),
			Operator: repository.OperatorEqual,
			Value:    price,
		})
	return p
}

// PriceNe filters by Price ne
func (p *ProductFilters) PriceNe(price float64) *ProductFilters {
	p.filters[ProductDBSchema.Price] = append(p.filters[ProductDBSchema.Price],
		&repository.Filter{
			Field:    string(ProductDBSchema.Price),
			Operator: repository.OperatorNotEqual,
			Value:    price,
		})
	return p
}

// PriceLt filters by Price lt
func (p *ProductFilters) PriceLt(price float64) *ProductFilters {
	p.filters[ProductDBSchema.Price] = append(p.filters[ProductDBSchema.Price],
		&repository.Filter{
			Field:    string(ProductDBSchema.Price),
			Operator: repository.OperatorLessThan,
			Value:    price,
		})
	return p
}

// PriceGt filters by Price gt
func (p *ProductFilters) PriceGt(price float64) *ProductFilters {
	p.filters[ProductDBSchema.Price] = append(p.filters[ProductDBSchema.Price],
		&repository.Filter{
			Field:    string(ProductDBSchema.Price),
			Operator: repository.OperatorGreaterThan,
			Value:    price,
		})
	return p
}

// PriceLte filters by Price lte
func (p *ProductFilters) PriceLte(price float64) *ProductFilters {
	p.filters[ProductDBSchema.Price] = append(p.filters[ProductDBSchema.Price],
		&repository.Filter{
			Field:    string(ProductDBSchema.Price),
			Operator: repository.OperatorLessThanOrEqual,
			Value:    price,
		})
	return p
}

// PriceGte filters by Price gte
func (p *ProductFilters) PriceGte(price float64) *ProductFilters {
	p.filters[ProductDBSchema.Price] = append(p.filters[ProductDBSchema.Price],
		&repository.Filter{
			Field:    string(ProductDBSchema.Price),
			Operator: repository.OperatorGreaterThanOrEqual,
			Value:    price,
		})
	return p
}

// PriceIn filters by Price in list
func (p *ProductFilters) PriceIn(prices ...float64) *ProductFilters {
	p.filters[ProductDBSchema.Price] = append(p.filters[ProductDBSchema.Price],
		&repository.Filter{
			Field:    string(ProductDBSchema.Price),
			Operator: repository.OperatorIn,
			Value:    prices,
		})
	return p
}

// PriceNotIn filters by Price in list
func (p *ProductFilters) PriceNotIn(prices ...float64) *ProductFilters {
	p.filters[ProductDBSchema.Price] = append(p.filters[ProductDBSchema.Price],
		&repository.Filter{
			Field:    string(ProductDBSchema.Price),
			Operator: repository.OperatorNotIn,
			Value:    prices,
		})
	return p
}

// StockEq filters by Stock eq
func (p *ProductFilters) StockEq(stock int) *ProductFilters {
	p.filters[ProductDBSchema.Stock] = append(p.filters[ProductDBSchema.Stock],
		&repository.Filter{
			Field:    string(ProductDBSchema.Stock),
			Operator: repository.OperatorEqual,
			Value:    stock,
		})
	return p
}

// StockNe filters by Stock ne
func (p *ProductFilters) StockNe(stock int) *ProductFilters {
	p.filters[ProductDBSchema.Stock] = append(p.filters[ProductDBSchema.Stock],
		&repository.Filter{
			Field:    string(ProductDBSchema.Stock),
			Operator: repository.OperatorNotEqual,
			Value:    stock,
		})
	return p
}

// StockLt filters by Stock lt
func (p *ProductFilters) StockLt(stock int) *ProductFilters {
	p.filters[ProductDBSchema.Stock] = append(p.filters[ProductDBSchema.Stock],
		&repository.Filter{
			Field:    string(ProductDBSchema.Stock),
			Operator: repository.OperatorLessThan,
			Value:    stock,
		})
	return p
}

// StockGt filters by Stock gt
func (p *ProductFilters) StockGt(stock int) *ProductFilters {
	p.filters[ProductDBSchema.Stock] = append(p.filters[ProductDBSchema.Stock],
		&repository.Filter{
			Field:    string(ProductDBSchema.Stock),
			Operator: repository.OperatorGreaterThan,
			Value:    stock,
		})
	return p
}

// StockLte filters by Stock lte
func (p *ProductFilters) StockLte(stock int) *ProductFilters {
	p.filters[ProductDBSchema.Stock] = append(p.filters[ProductDBSchema.Stock],
		&repository.Filter{
			Field:    string(ProductDBSchema.Stock),
			Operator: repository.OperatorLessThanOrEqual,
			Value:    stock,
		})
	return p
}

// StockGte filters by Stock gte
func (p *ProductFilters) StockGte(stock int) *ProductFilters {
	p.filters[ProductDBSchema.Stock] = append(p.filters[ProductDBSchema.Stock],
		&repository.Filter{
			Field:    string(ProductDBSchema.Stock),
			Operator: repository.OperatorGreaterThanOrEqual,
			Value:    stock,
		})
	return p
}

// StockIn filters by Stock in list
func (p *ProductFilters) StockIn(stocks ...int) *ProductFilters {
	p.filters[ProductDBSchema.Stock] = append(p.filters[ProductDBSchema.Stock],
		&repository.Filter{
			Field:    string(ProductDBSchema.Stock),
			Operator: repository.OperatorIn,
			Value:    stocks,
		})
	return p
}

// StockNotIn filters by Stock in list
func (p *ProductFilters) StockNotIn(stocks ...int) *ProductFilters {
	p.filters[ProductDBSchema.Stock] = append(p.filters[ProductDBSchema.Stock],
		&repository.Filter{
			Field:    string(ProductDBSchema.Stock),
			Operator: repository.OperatorNotIn,
			Value:    stocks,
		})
	return p
}

// CategoryIDEq filters by CategoryID eq
func (p *ProductFilters) CategoryIDEq(categoryID int64) *ProductFilters {
	p.filters[ProductDBSchema.CategoryID] = append(p.filters[ProductDBSchema.CategoryID],
		&repository.Filter{
			Field:    string(ProductDBSchema.CategoryID),
			Operator: repository.OperatorEqual,
			Value:    categoryID,
		})
	return p
}

// CategoryIDNe filters by CategoryID ne
func (p *ProductFilters) CategoryIDNe(categoryID int64) *ProductFilters {
	p.filters[ProductDBSchema.CategoryID] = append(p.filters[ProductDBSchema.CategoryID],
		&repository.Filter{
			Field:    string(ProductDBSchema.CategoryID),
			Operator: repository.OperatorNotEqual,
			Value:    categoryID,
		})
	return p
}

// CategoryIDLt filters by CategoryID lt
func (p *ProductFilters) CategoryIDLt(categoryID int64) *ProductFilters {
	p.filters[ProductDBSchema.CategoryID] = append(p.filters[ProductDBSchema.CategoryID],
		&repository.Filter{
			Field:    string(ProductDBSchema.CategoryID),
			Operator: repository.OperatorLessThan,
			Value:    categoryID,
		})
	return p
}

// CategoryIDGt filters by CategoryID gt
func (p *ProductFilters) CategoryIDGt(categoryID int64) *ProductFilters {
	p.filters[ProductDBSchema.CategoryID] = append(p.filters[ProductDBSchema.CategoryID],
		&repository.Filter{
			Field:    string(ProductDBSchema.CategoryID),
			Operator: repository.OperatorGreaterThan,
			Value:    categoryID,
		})
	return p
}

// CategoryIDLte filters by CategoryID lte
func (p *ProductFilters) CategoryIDLte(categoryID int64) *ProductFilters {
	p.filters[ProductDBSchema.CategoryID] = append(p.filters[ProductDBSchema.CategoryID],
		&repository.Filter{
			Field:    string(ProductDBSchema.CategoryID),
			Operator: repository.OperatorLessThanOrEqual,
			Value:    categoryID,
		})
	return p
}

// CategoryIDGte filters by CategoryID gte
func (p *ProductFilters) CategoryIDGte(categoryID int64) *ProductFilters {
	p.filters[ProductDBSchema.CategoryID] = append(p.filters[ProductDBSchema.CategoryID],
		&repository.Filter{
			Field:    string(ProductDBSchema.CategoryID),
			Operator: repository.OperatorGreaterThanOrEqual,
			Value:    categoryID,
		})
	return p
}

// CategoryIDIn filters by CategoryID in list
func (p *ProductFilters) CategoryIDIn(categoryIDs ...int64) *ProductFilters {
	p.filters[ProductDBSchema.CategoryID] = append(p.filters[ProductDBSchema.CategoryID],
		&repository.Filter{
			Field:    string(ProductDBSchema.CategoryID),
			Operator: repository.OperatorIn,
			Value:    categoryIDs,
		})
	return p
}

// CategoryIDNotIn filters by CategoryID in list
func (p *ProductFilters) CategoryIDNotIn(categoryIDs ...int64) *ProductFilters {
	p.filters[ProductDBSchema.CategoryID] = append(p.filters[ProductDBSchema.CategoryID],
		&repository.Filter{
			Field:    string(ProductDBSchema.CategoryID),
			Operator: repository.OperatorNotIn,
			Value:    categoryIDs,
		})
	return p
}

// IsActiveEq filters by IsActive eq
func (p *ProductFilters) IsActiveEq(isActive bool) *ProductFilters {
	p.filters[ProductDBSchema.IsActive] = append(p.filters[ProductDBSchema.IsActive],
		&repository.Filter{
			Field:    string(ProductDBSchema.IsActive),
			Operator: repository.OperatorEqual,
			Value:    isActive,
		})
	return p
}

// IsActiveNe filters by IsActive ne
func (p *ProductFilters) IsActiveNe(isActive bool) *ProductFilters {
	p.filters[ProductDBSchema.IsActive] = append(p.filters[ProductDBSchema.IsActive],
		&repository.Filter{
			Field:    string(ProductDBSchema.IsActive),
			Operator: repository.OperatorNotEqual,
			Value:    isActive,
		})
	return p
}

// CreatedAtEq filters by CreatedAt eq
func (p *ProductFilters) CreatedAtEq(createdAt time.Time) *ProductFilters {
	p.filters[ProductDBSchema.CreatedAt] = append(p.filters[ProductDBSchema.CreatedAt],
		&repository.Filter{
			Field:    string(ProductDBSchema.CreatedAt),
			Operator: repository.OperatorEqual,
			Value:    createdAt,
		})
	return p
}

// CreatedAtNe filters by CreatedAt ne
func (p *ProductFilters) CreatedAtNe(createdAt time.Time) *ProductFilters {
	p.filters[ProductDBSchema.CreatedAt] = append(p.filters[ProductDBSchema.CreatedAt],
		&repository.Filter{
			Field:    string(ProductDBSchema.CreatedAt),
			Operator: repository.OperatorNotEqual,
			Value:    createdAt,
		})
	return p
}

// CreatedAtLt filters by CreatedAt lt
func (p *ProductFilters) CreatedAtLt(createdAt time.Time) *ProductFilters {
	p.filters[ProductDBSchema.CreatedAt] = append(p.filters[ProductDBSchema.CreatedAt],
		&repository.Filter{
			Field:    string(ProductDBSchema.CreatedAt),
			Operator: repository.OperatorLessThan,
			Value:    createdAt,
		})
	return p
}

// CreatedAtGt filters by CreatedAt gt
func (p *ProductFilters) CreatedAtGt(createdAt time.Time) *ProductFilters {
	p.filters[ProductDBSchema.CreatedAt] = append(p.filters[ProductDBSchema.CreatedAt],
		&repository.Filter{
			Field:    string(ProductDBSchema.CreatedAt),
			Operator: repository.OperatorGreaterThan,
			Value:    createdAt,
		})
	return p
}

// CreatedAtLte filters by CreatedAt lte
func (p *ProductFilters) CreatedAtLte(createdAt time.Time) *ProductFilters {
	p.filters[ProductDBSchema.CreatedAt] = append(p.filters[ProductDBSchema.CreatedAt],
		&repository.Filter{
			Field:    string(ProductDBSchema.CreatedAt),
			Operator: repository.OperatorLessThanOrEqual,
			Value:    createdAt,
		})
	return p
}

// CreatedAtGte filters by CreatedAt gte
func (p *ProductFilters) CreatedAtGte(createdAt time.Time) *ProductFilters {
	p.filters[ProductDBSchema.CreatedAt] = append(p.filters[ProductDBSchema.CreatedAt],
		&repository.Filter{
			Field:    string(ProductDBSchema.CreatedAt),
			Operator: repository.OperatorGreaterThanOrEqual,
			Value:    createdAt,
		})
	return p
}

// CreatedAtIn filters by CreatedAt in list
func (p *ProductFilters) CreatedAtIn(createdAts ...time.Time) *ProductFilters {
	p.filters[ProductDBSchema.CreatedAt] = append(p.filters[ProductDBSchema.CreatedAt],
		&repository.Filter{
			Field:    string(ProductDBSchema.CreatedAt),
			Operator: repository.OperatorIn,
			Value:    createdAts,
		})
	return p
}

// CreatedAtNotIn filters by CreatedAt in list
func (p *ProductFilters) CreatedAtNotIn(createdAts ...time.Time) *ProductFilters {
	p.filters[ProductDBSchema.CreatedAt] = append(p.filters[ProductDBSchema.CreatedAt],
		&repository.Filter{
			Field:    string(ProductDBSchema.CreatedAt),
			Operator: repository.OperatorNotIn,
			Value:    createdAts,
		})
	return p
}

// UpdatedAtEq filters by UpdatedAt eq
func (p *ProductFilters) UpdatedAtEq(updatedAt *time.Time) *ProductFilters {
	p.filters[ProductDBSchema.UpdatedAt] = append(p.filters[ProductDBSchema.UpdatedAt],
		&repository.Filter{
			Field:    string(ProductDBSchema.UpdatedAt),
			Operator: repository.OperatorEqual,
			Value:    updatedAt,
		})
	return p
}

// UpdatedAtNe filters by UpdatedAt ne
func (p *ProductFilters) UpdatedAtNe(updatedAt *time.Time) *ProductFilters {
	p.filters[ProductDBSchema.UpdatedAt] = append(p.filters[ProductDBSchema.UpdatedAt],
		&repository.Filter{
			Field:    string(ProductDBSchema.UpdatedAt),
			Operator: repository.OperatorNotEqual,
			Value:    updatedAt,
		})
	return p
}

// UpdatedAtIsNull filters by UpdatedAt is null check
func (p *ProductFilters) UpdatedAtIsNull() *ProductFilters {
	p.filters[ProductDBSchema.UpdatedAt] = append(p.filters[ProductDBSchema.UpdatedAt],
		&repository.Filter{
			Field:    string(ProductDBSchema.UpdatedAt),
			Operator: repository.OperatorIsNull,
			Value:    nil,
		})
	return p
}

// UpdatedAtIsNotNull filters by UpdatedAt is null check
func (p *ProductFilters) UpdatedAtIsNotNull() *ProductFilters {
	p.filters[ProductDBSchema.UpdatedAt] = append(p.filters[ProductDBSchema.UpdatedAt],
		&repository.Filter{
			Field:    string(ProductDBSchema.UpdatedAt),
			Operator: repository.OperatorIsNotNull,
			Value:    nil,
		})
	return p
}

// ProductUpdater provides update capabilities for Product
type ProductUpdater struct {
	fields map[string]interface{}
}

// NewProductUpdater creates a new updater instance
func NewProductUpdater() *ProductUpdater {
	return &ProductUpdater{
		fields: make(map[string]interface{}),
	}
}

// GetChangeSet returns the fields to update
func (u *ProductUpdater) GetChangeSet() map[string]interface{} {
	return u.fields
}

// SetID sets the ID field for update
func (p *ProductUpdater) SetID(iD int64) *ProductUpdater {
	p.fields[string(ProductDBSchema.ID)] = iD
	return p
}

// SetName sets the Name field for update
func (p *ProductUpdater) SetName(name string) *ProductUpdater {
	p.fields[string(ProductDBSchema.Name)] = name
	return p
}

// SetSKU sets the SKU field for update
func (p *ProductUpdater) SetSKU(sKU string) *ProductUpdater {
	p.fields[string(ProductDBSchema.SKU)] = sKU
	return p
}

// SetDescription sets the Description field for update
func (p *ProductUpdater) SetDescription(description *string) *ProductUpdater {
	p.fields[string(ProductDBSchema.Description)] = description
	return p
}

// SetPrice sets the Price field for update
func (p *ProductUpdater) SetPrice(price float64) *ProductUpdater {
	p.fields[string(ProductDBSchema.Price)] = price
	return p
}

// SetStock sets the Stock field for update
func (p *ProductUpdater) SetStock(stock int) *ProductUpdater {
	p.fields[string(ProductDBSchema.Stock)] = stock
	return p
}

// SetCategoryID sets the CategoryID field for update
func (p *ProductUpdater) SetCategoryID(categoryID int64) *ProductUpdater {
	p.fields[string(ProductDBSchema.CategoryID)] = categoryID
	return p
}

// SetIsActive sets the IsActive field for update
func (p *ProductUpdater) SetIsActive(isActive bool) *ProductUpdater {
	p.fields[string(ProductDBSchema.IsActive)] = isActive
	return p
}

// SetTags sets the Tags field for update
func (p *ProductUpdater) SetTags(tags datatypes.JSONSlice[string]) *ProductUpdater {
	p.fields[string(ProductDBSchema.Tags)] = tags
	return p
}

// SetAttributes sets the Attributes field for update
func (p *ProductUpdater) SetAttributes(attributes datatypes.JSONType[*Attributes]) *ProductUpdater {
	p.fields[string(ProductDBSchema.Attributes)] = attributes
	return p
}

// SetCreatedAt sets the CreatedAt field for update
func (p *ProductUpdater) SetCreatedAt(createdAt time.Time) *ProductUpdater {
	p.fields[string(ProductDBSchema.CreatedAt)] = createdAt
	return p
}

// SetUpdatedAt sets the UpdatedAt field for update
func (p *ProductUpdater) SetUpdatedAt(updatedAt *time.Time) *ProductUpdater {
	p.fields[string(ProductDBSchema.UpdatedAt)] = updatedAt
	return p
}

// ProductOptions provides query options for Product
type ProductOptions struct {
	options []func(*repository.Options)
}

// NewProductOptions creates a new options instance
func NewProductOptions() *ProductOptions {
	return &ProductOptions{}
}

// Apply applies all configured options to repository options
func (o *ProductOptions) Apply(repoOpts *repository.Options) {
	for _, option := range o.options {
		option(repoOpts)
	}
}

// OrderByIDAsc orders results by ID asc
func (p *ProductOptions) OrderByIDAsc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.ID),
			Direction: "asc",
		})
	})
	return p
}

// OrderByIDDesc orders results by ID desc
func (p *ProductOptions) OrderByIDDesc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.ID),
			Direction: "desc",
		})
	})
	return p
}

// OrderByNameAsc orders results by Name asc
func (p *ProductOptions) OrderByNameAsc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.Name),
			Direction: "asc",
		})
	})
	return p
}

// OrderByNameDesc orders results by Name desc
func (p *ProductOptions) OrderByNameDesc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.Name),
			Direction: "desc",
		})
	})
	return p
}

// OrderBySKUAsc orders results by SKU asc
func (p *ProductOptions) OrderBySKUAsc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.SKU),
			Direction: "asc",
		})
	})
	return p
}

// OrderBySKUDesc orders results by SKU desc
func (p *ProductOptions) OrderBySKUDesc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.SKU),
			Direction: "desc",
		})
	})
	return p
}

// OrderByDescriptionAsc orders results by Description asc
func (p *ProductOptions) OrderByDescriptionAsc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.Description),
			Direction: "asc",
		})
	})
	return p
}

// OrderByDescriptionDesc orders results by Description desc
func (p *ProductOptions) OrderByDescriptionDesc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.Description),
			Direction: "desc",
		})
	})
	return p
}

// OrderByPriceAsc orders results by Price asc
func (p *ProductOptions) OrderByPriceAsc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.Price),
			Direction: "asc",
		})
	})
	return p
}

// OrderByPriceDesc orders results by Price desc
func (p *ProductOptions) OrderByPriceDesc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.Price),
			Direction: "desc",
		})
	})
	return p
}

// OrderByStockAsc orders results by Stock asc
func (p *ProductOptions) OrderByStockAsc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.Stock),
			Direction: "asc",
		})
	})
	return p
}

// OrderByStockDesc orders results by Stock desc
func (p *ProductOptions) OrderByStockDesc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.Stock),
			Direction: "desc",
		})
	})
	return p
}

// OrderByCategoryIDAsc orders results by CategoryID asc
func (p *ProductOptions) OrderByCategoryIDAsc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.CategoryID),
			Direction: "asc",
		})
	})
	return p
}

// OrderByCategoryIDDesc orders results by CategoryID desc
func (p *ProductOptions) OrderByCategoryIDDesc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.CategoryID),
			Direction: "desc",
		})
	})
	return p
}

// OrderByIsActiveAsc orders results by IsActive asc
func (p *ProductOptions) OrderByIsActiveAsc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.IsActive),
			Direction: "asc",
		})
	})
	return p
}

// OrderByIsActiveDesc orders results by IsActive desc
func (p *ProductOptions) OrderByIsActiveDesc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.IsActive),
			Direction: "desc",
		})
	})
	return p
}

// OrderByCreatedAtAsc orders results by CreatedAt asc
func (p *ProductOptions) OrderByCreatedAtAsc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.CreatedAt),
			Direction: "asc",
		})
	})
	return p
}

// OrderByCreatedAtDesc orders results by CreatedAt desc
func (p *ProductOptions) OrderByCreatedAtDesc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.CreatedAt),
			Direction: "desc",
		})
	})
	return p
}

// OrderByUpdatedAtAsc orders results by UpdatedAt asc
func (p *ProductOptions) OrderByUpdatedAtAsc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.UpdatedAt),
			Direction: "asc",
		})
	})
	return p
}

// OrderByUpdatedAtDesc orders results by UpdatedAt desc
func (p *ProductOptions) OrderByUpdatedAtDesc() *ProductOptions {
	p.options = append(p.options, func(options *repository.Options) {
		options.SortFields = append(options.SortFields, &repository.SortField{
			Field:     string(ProductDBSchema.UpdatedAt),
			Direction: "desc",
		})
	})
	return p
}

// ProductDBSchemaField represents database field names
type ProductDBSchemaField string

// String returns the string representation of the field
func (f ProductDBSchemaField) String() string {
	return string(f)
}

// ProductDBSchema contains database field mappings for Product
var ProductDBSchema = struct {
	ID          ProductDBSchemaField
	Name        ProductDBSchemaField
	SKU         ProductDBSchemaField
	Description ProductDBSchemaField
	Price       ProductDBSchemaField
	Stock       ProductDBSchemaField
	CategoryID  ProductDBSchemaField
	IsActive    ProductDBSchemaField
	Tags        ProductDBSchemaField
	Attributes  ProductDBSchemaField
	CreatedAt   ProductDBSchemaField
	UpdatedAt   ProductDBSchemaField
}{
	ID:          ProductDBSchemaField("id"),
	Name:        ProductDBSchemaField("name"),
	SKU:         ProductDBSchemaField("sku"),
	Description: ProductDBSchemaField("description"),
	Price:       ProductDBSchemaField("price"),
	Stock:       ProductDBSchemaField("stock"),
	CategoryID:  ProductDBSchemaField("category_id"),
	IsActive:    ProductDBSchemaField("is_active"),
	Tags:        ProductDBSchemaField("tags"),
	Attributes:  ProductDBSchemaField("attributes"),
	CreatedAt:   ProductDBSchemaField("created_at"),
	UpdatedAt:   ProductDBSchemaField("updated_at"),
}
